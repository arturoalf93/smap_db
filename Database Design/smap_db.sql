-- test comment

-- MySQL Script generated by MySQL Workbench
-- Fri Sep 13 13:16:02 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema smap_production
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema smap_production
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `smap_production` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema smap_staging
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema smap_staging
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `smap_staging` ;
-- -----------------------------------------------------
-- Schema smap_output
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema smap_output
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `smap_output` ;
USE `smap_production` ;

-- -----------------------------------------------------
-- Table `smap_production`.`rfi_participation_status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`rfi_participation_status` (
  `rfi_participation_status_id` INT NOT NULL,
  `rfi_participation_status` VARCHAR(45) NULL COMMENT '0: Closed. not participating this quarter or closed (after finishing round 2)\n1: Round 1 - Vendor\n2: Round 1 - Analysts\n3: Round 2 - Vendor\n4: Round 2 - Analysts',
  PRIMARY KEY (`rfi_participation_status_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`vendors_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`vendors_c` (
  `vendorid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `vendor_name` VARCHAR(45) NOT NULL,
  `nda` INT(1) NULL,
  `consent` INT(1) NULL,
  `active` INT(1) NOT NULL,
  `rfi_participation_status_id` INT NULL,
  PRIMARY KEY (`vendorid`),
  INDEX `fk_vendors_c_rfi_participation_status_idx` (`rfi_participation_status_id` ASC),
  CONSTRAINT `fk_vendors_rfi_participation_status`
    FOREIGN KEY (`rfi_participation_status_id`)
    REFERENCES `smap_production`.`rfi_participation_status` (`rfi_participation_status_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`user_roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`user_roles` (
  `user_roleid` INT NOT NULL,
  `user_role` VARCHAR(45) NULL,
  PRIMARY KEY (`user_roleid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`users_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`users_c` (
  `userid` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(80) NOT NULL,
  `user_role_id` INT NULL,
  `assigned_vendor_id` INT UNSIGNED NULL,
  `password` VARCHAR(45) NOT NULL,
  `active` INT(1) NULL,
  `registration_date` DATETIME NOT NULL,
  PRIMARY KEY (`userid`),
  INDEX `fk_users_vendors_idx` (`assigned_vendor_id` ASC),
  INDEX `fk_users_c_user_roles_idx` (`user_role_id` ASC),
  CONSTRAINT `fk_users_vendors`
    FOREIGN KEY (`assigned_vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_user_roles`
    FOREIGN KEY (`user_role_id`)
    REFERENCES `smap_production`.`user_roles` (`user_roleid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`elements_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`elements_h` (
  `eid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `s_id` INT UNSIGNED NOT NULL,
  `element_name` VARCHAR(200) NOT NULL,
  `description` VARCHAR(5000) NULL,
  `scoring_scale` VARCHAR(2000) NULL,
  `e_order` DECIMAL(9,4) UNSIGNED NOT NULL COMMENT 'When a new element is added, it must fall under the correct subcategory. One subcategory should never be split in two, non consecutive groups.',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`eid`, `ud`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_elements_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`modules_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`modules_h` (
  `mid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `module_name` VARCHAR(50) NOT NULL,
  `active` INT(1) NULL,
  `quarter` INT(1) NULL,
  `year` INT(4) NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`mid`, `ud`),
  INDEX `fk_users2_idx` (`user_id` ASC),
  CONSTRAINT `fk_modules_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`module_elements_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`module_elements_h` (
  `m_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `active` INT(1) NOT NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`m_id`, `e_id`, `ud`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_module_elements_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`parent_categories_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`parent_categories_c` (
  `pcid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `parent_category_name` VARCHAR(45) NULL,
  PRIMARY KEY (`pcid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`categories_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`categories_c` (
  `cid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pc_id` INT UNSIGNED NOT NULL,
  `category_name` VARCHAR(100) NULL,
  PRIMARY KEY (`cid`),
  INDEX `fk_categories_subcategories_idx` (`pc_id` ASC),
  CONSTRAINT `fk_categories_parent_categories`
    FOREIGN KEY (`pc_id`)
    REFERENCES `smap_production`.`parent_categories_c` (`pcid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`subcategories_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`subcategories_c` (
  `sid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `c_id` INT UNSIGNED NOT NULL,
  `subcategory_name` VARCHAR(100) NULL,
  PRIMARY KEY (`sid`),
  INDEX `fk_subcategories_elements_idx` (`c_id` ASC),
  CONSTRAINT `fk_subcategories_categories`
    FOREIGN KEY (`c_id`)
    REFERENCES `smap_production`.`categories_c` (`cid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`current_quarteryear_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`current_quarteryear_c` (
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  PRIMARY KEY (`quarter`, `year`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`vendor_modules_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`vendor_modules_h` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  `customer_count` INT NULL,
  `active` INT(1) NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `user_id` INT NULL,
  PRIMARY KEY (`vendor_id`, `m_id`, `ud`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_vendor_modules_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`elements_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`elements_c` (
  `eid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `s_id` INT UNSIGNED NOT NULL,
  `element_name` VARCHAR(200) NOT NULL,
  `description` VARCHAR(5000) NULL,
  `scoring_scale` VARCHAR(2000) NULL,
  `e_order` DECIMAL(9,4) UNSIGNED NOT NULL COMMENT 'When a new element is added, it must fall under the correct subcategory. One subcategory should never be split in two, non consecutive groups.',
  PRIMARY KEY (`eid`),
  INDEX `fk_elements_subcategories_idx` (`s_id` ASC),
  CONSTRAINT `fk_elements_subcategories`
    FOREIGN KEY (`s_id`)
    REFERENCES `smap_production`.`subcategories_c` (`sid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`rfi_vendors_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`rfi_vendors_c` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `self_score` DECIMAL(2,1) UNSIGNED NULL,
  `self_description` VARCHAR(2500) NULL,
  PRIMARY KEY (`vendor_id`, `e_id`),
  INDEX `fk_rfi_vendors_elements_idx` (`e_id` ASC),
  CONSTRAINT `fk_rfi_vendors_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rfi_vendors_elements`
    FOREIGN KEY (`e_id`)
    REFERENCES `smap_production`.`elements_c` (`eid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`rfi_analysts_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`rfi_analysts_c` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `sm_score` DECIMAL(2,1) NULL,
  `analyst_notes` VARCHAR(300) NULL,
  PRIMARY KEY (`vendor_id`, `e_id`),
  INDEX `fk_rfi_analysts_elements_idx` (`e_id` ASC),
  CONSTRAINT `fk_rfi_analysts_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rfi_analysts_elements`
    FOREIGN KEY (`e_id`)
    REFERENCES `smap_production`.`elements_c` (`eid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`vendor_attachments_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`vendor_attachments_c` (
  `attachment_id` INT NOT NULL AUTO_INCREMENT,
  `vendor_id` INT UNSIGNED NOT NULL,
  `filename` VARCHAR(200) NULL,
  `extension` VARCHAR(10) NULL,
  `path` VARCHAR(500) NULL,
  `notes` VARCHAR(300) NULL,
  `upload_date` DATETIME NULL,
  PRIMARY KEY (`attachment_id`),
  CONSTRAINT `fk_vendor_attachments__c_vendors_c`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`current_quarteryear_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`current_quarteryear_h` (
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`quarter`, `year`, `ud`),
  INDEX `fk_users1_idx` (`user_id` ASC),
  CONSTRAINT `fk_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`modules_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`modules_c` (
  `mid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `module_name` VARCHAR(50) NOT NULL,
  `active` INT(1) NULL,
  PRIMARY KEY (`mid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`vendor_modules_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`vendor_modules_c` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  `customer_count` INT NULL,
  PRIMARY KEY (`vendor_id`, `m_id`),
  INDEX `fk_rfi_participation_modules_c_idx` (`m_id` ASC),
  CONSTRAINT `fk_rfi_participation_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rfi_participation_modules_c`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`module_elements_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`module_elements_c` (
  `m_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`m_id`, `e_id`),
  INDEX `fk_module_elements_elements_c_idx` (`e_id` ASC),
  CONSTRAINT `fk_module_elements_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_module_elements_elements`
    FOREIGN KEY (`e_id`)
    REFERENCES `smap_production`.`elements_c` (`eid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`users_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`users_h` (
  `userid` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(80) NOT NULL,
  `user_role_id` INT NULL,
  `assigned_vendor_id` INT UNSIGNED NULL,
  `password` VARCHAR(45) NOT NULL,
  `active` INT(1) NOT NULL,
  `registration_date` DATETIME NOT NULL,
  `ud` DATETIME NOT NULL,
  `updated_by_user_id` INT NULL,
  PRIMARY KEY (`userid`, `ud`),
  INDEX `fk_users_idx` (`updated_by_user_id` ASC),
  CONSTRAINT `fk_users_users`
    FOREIGN KEY (`updated_by_user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`vendors_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`vendors_h` (
  `vendorid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `vendor_name` VARCHAR(45) NOT NULL,
  `nda` INT(1) NULL,
  `consent` INT(1) NULL,
  `active` INT(1) NOT NULL,
  `rfi_participation_status_id` INT NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`vendorid`, `ud`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_vendors_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`subcategories_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`subcategories_h` (
  `sid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `c_id` INT UNSIGNED NOT NULL,
  `subcategory_name` VARCHAR(100) NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`sid`, `ud`),
  INDEX `fk_users3_idx` (`user_id` ASC),
  CONSTRAINT `fk_subcategories_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`categories_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`categories_h` (
  `cid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pc_id` INT UNSIGNED NOT NULL,
  `category_name` VARCHAR(100) NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`cid`, `ud`),
  INDEX `fk_users4_idx` (`user_id` ASC),
  CONSTRAINT `fk_categories_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`parent_categories_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`parent_categories_h` (
  `pcid` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `parent_category_name` VARCHAR(45) NULL,
  `quarter` INT(1) UNSIGNED NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`pcid`, `ud`),
  INDEX `fk_users5_idx` (`user_id` ASC),
  CONSTRAINT `fk_parent_categories_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`vendor_attachments_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`vendor_attachments_h` (
  `attachment_id` INT NOT NULL AUTO_INCREMENT,
  `vendor_id` INT UNSIGNED NOT NULL,
  `filename` VARCHAR(200) NULL,
  `extension` VARCHAR(10) NULL,
  `path` VARCHAR(500) NULL,
  `notes` VARCHAR(300) NULL,
  `upload_date` DATETIME NULL,
  `active` INT(1) NULL,
  `quarter` INT(1) NULL,
  `year` INT(4) NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`attachment_id`, `ud`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_vendor_attachments_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`rfi_vendors_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`rfi_vendors_h` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `self_score` DECIMAL(2,1) UNSIGNED NULL,
  `self_description` VARCHAR(2500) NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`vendor_id`, `e_id`, `ud`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_rfi_vendors_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`rfi_analysts_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`rfi_analysts_h` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `sm_score` DECIMAL(2,1) NULL,
  `analyst_notes` VARCHAR(300) NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`vendor_id`, `e_id`, `ud`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_rfi_analysts_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`personas_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`personas_c` (
  `personaid` INT NOT NULL,
  `persona_name` VARCHAR(45) NULL,
  `user_id` INT NULL,
  `active` INT(1) NULL,
  PRIMARY KEY (`personaid`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_personas_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`weights_elements_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`weights_elements_c` (
  `persona_id` INT NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `weight` DECIMAL(4,2) NULL,
  PRIMARY KEY (`persona_id`, `m_id`, `e_id`),
  INDEX `fk_modules_idx` (`m_id` ASC),
  INDEX `fk_elements_idx` (`e_id` ASC),
  CONSTRAINT `fk_weights_elements_personas`
    FOREIGN KEY (`persona_id`)
    REFERENCES `smap_production`.`personas_c` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weights_elements_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weights_elements_elements`
    FOREIGN KEY (`e_id`)
    REFERENCES `smap_production`.`elements_c` (`eid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`weights_categories_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`weights_categories_c` (
  `persona_id` INT NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  `c_id` INT UNSIGNED NOT NULL,
  `weight` DECIMAL(5,3) NULL,
  PRIMARY KEY (`persona_id`, `m_id`, `c_id`),
  INDEX `fk_modules_idx` (`m_id` ASC),
  INDEX `fk_categories_idx` (`c_id` ASC),
  CONSTRAINT `fk_weights_categories_personas`
    FOREIGN KEY (`persona_id`)
    REFERENCES `smap_production`.`personas_c` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weights_categories_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weights_categories_categories`
    FOREIGN KEY (`c_id`)
    REFERENCES `smap_production`.`categories_c` (`cid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`price_scores_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`price_scores_c` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  `persona_id` INT NOT NULL,
  `price_score` DECIMAL(2,1) NULL,
  PRIMARY KEY (`vendor_id`, `m_id`, `persona_id`),
  INDEX `fk_modules_idx` (`m_id` ASC),
  INDEX `fk_personas_idx` (`persona_id` ASC),
  CONSTRAINT `fk_price_scores_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_price_scores_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_price_scores_personas`
    FOREIGN KEY (`persona_id`)
    REFERENCES `smap_production`.`personas_c` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`references_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`references_c` (
  `reference_id` INT NOT NULL,
  `vendor_id` INT UNSIGNED NULL,
  `datetime` DATETIME NULL,
  `name` VARCHAR(45) NULL,
  `email` VARCHAR(100) NULL,
  `company` VARCHAR(45) NULL,
  `quarter` INT(1) NULL,
  `year` INT(1) NULL,
  `ref_status_id` INT NULL,
  `internal_comments` VARCHAR(100) NULL,
  `provider_public` VARCHAR(10) NULL,
  `original_vendor_id` INT NULL,
  `active` INT(1) NULL,
  PRIMARY KEY (`reference_id`),
  INDEX `fk_vendors_idx` (`vendor_id` ASC),
  CONSTRAINT `fk_references_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`reference_modules_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`reference_modules_c` (
  `reference_id` INT NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`reference_id`, `m_id`),
  INDEX `fk_modules_idx` (`m_id` ASC),
  CONSTRAINT `fk_reference_modules_references`
    FOREIGN KEY (`reference_id`)
    REFERENCES `smap_production`.`references_c` (`reference_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reference_modules_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`c_i_questions_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`c_i_questions_c` (
  `c_i_questionid` INT NOT NULL,
  `question` VARCHAR(500) NULL,
  `active` INT(1) NULL,
  PRIMARY KEY (`c_i_questionid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`c_i_questions_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`c_i_questions_h` (
  `c_i_questionid` INT NOT NULL,
  `question` VARCHAR(500) NULL,
  `active` INT(1) NULL,
  `quarter` INT(1) NULL,
  `year` INT(4) NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`c_i_questionid`, `ud`),
  INDEX `fk_userid_idx` (`user_id` ASC),
  CONSTRAINT `fk_c_i_questions_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`c_i_answers_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`c_i_answers_c` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `c_i_question_id` INT NOT NULL,
  `answer` VARCHAR(1000) NULL,
  PRIMARY KEY (`vendor_id`, `c_i_question_id`),
  INDEX `fk_c_i_questions_idx` (`c_i_question_id` ASC),
  CONSTRAINT `fk_c_i_answers_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_c_i_answers_c_i_questions`
    FOREIGN KEY (`c_i_question_id`)
    REFERENCES `smap_production`.`c_i_questions_c` (`c_i_questionid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`c_i_answers_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`c_i_answers_h` (
  `vendor_id` INT NOT NULL,
  `c_i_question_id` INT NOT NULL,
  `answer` VARCHAR(1000) NULL,
  `active` INT(1) NULL,
  `quarter` INT(1) NULL,
  `year` INT(4) NULL,
  `ud` DATETIME NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`vendor_id`, `c_i_question_id`, `user_id`),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_c_i_answers_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`survey_questions_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`survey_questions_c` (
  `questionid` INT NOT NULL,
  `statement` VARCHAR(500) NULL,
  PRIMARY KEY (`questionid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`weights_survey_questions_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`weights_survey_questions_c` (
  `persona_id` INT NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  `question_id` INT NOT NULL,
  `weight` DECIMAL(4,2) NULL,
  PRIMARY KEY (`persona_id`, `m_id`, `question_id`),
  INDEX `fk_modules_idx` (`m_id` ASC),
  INDEX `fk_survey_questions_idx` (`question_id` ASC),
  CONSTRAINT `fk_weights_survey_questions_pesonas`
    FOREIGN KEY (`persona_id`)
    REFERENCES `smap_production`.`personas_c` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weights_survey_questions_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weights_survey_questions_survey_questions`
    FOREIGN KEY (`question_id`)
    REFERENCES `smap_production`.`survey_questions_c` (`questionid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`survey_answers_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`survey_answers_c` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `reference_id` INT NULL,
  `question_id` INT NOT NULL,
  `answer` VARCHAR(1000) NULL,
  PRIMARY KEY (`vendor_id`, `question_id`),
  INDEX `fk_survey_questions_idx` (`question_id` ASC),
  INDEX `fk_references_idx` (`reference_id` ASC),
  CONSTRAINT `fk_survey_answers_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_survey_answers_survey_questions`
    FOREIGN KEY (`question_id`)
    REFERENCES `smap_production`.`survey_questions_c` (`questionid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_survey_answers_references`
    FOREIGN KEY (`reference_id`)
    REFERENCES `smap_production`.`references_c` (`reference_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`user_assigned_subcategories_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`user_assigned_subcategories_c` (
  `user_id` INT NOT NULL,
  `s_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user_id`, `s_id`),
  INDEX `fk_user_assigned_categories_categories_idx` (`s_id` ASC),
  CONSTRAINT `fk_user_assigned_categories_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_assigned_categories_categories`
    FOREIGN KEY (`s_id`)
    REFERENCES `smap_production`.`subcategories_c` (`sid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`user_assigned_subcategories_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`user_assigned_subcategories_h` (
  `user_id` INT NOT NULL,
  `s_id` INT UNSIGNED NOT NULL,
  `active` INT(1) NULL,
  `quarter` INT(1) NULL,
  `year` INT(4) NULL,
  `ud` DATETIME NULL,
  `updated_by_user_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `s_id`),
  CONSTRAINT `fk_user_assigned_vendors_analysts_users`
    FOREIGN KEY (`updated_by_user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`assigned_vendors_analysts_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`assigned_vendors_analysts_c` (
  `user_id` INT NOT NULL,
  `vendor_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user_id`, `vendor_id`),
  INDEX `fk_vendors_idx` (`vendor_id` ASC),
  CONSTRAINT `fk_assigned_vendors_analysts_users_1`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_assigned_vendors_analysts_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`assigned_vendors_analysts_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`assigned_vendors_analysts_h` (
  `user_id` INT NOT NULL,
  `vendor_id` INT UNSIGNED NOT NULL,
  `active` INT(1) NULL,
  `quarter` INT(1) NULL,
  `year` INT(4) NULL,
  `ud` DATETIME NULL,
  `updated_by_user_id` INT NULL,
  PRIMARY KEY (`user_id`, `vendor_id`),
  INDEX `fk_users_idx` (`updated_by_user_id` ASC),
  CONSTRAINT `fk_assigned_vendors_analysts_users_2`
    FOREIGN KEY (`updated_by_user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`log_codes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`log_codes` (
  `action_code` INT NOT NULL,
  `action` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`action_code`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`log_trail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`log_trail` (
  `log_row_id` INT NOT NULL,
  `attempted_email` VARCHAR(45) NULL,
  `user_id` INT NOT NULL,
  `ip` VARCHAR(15) NULL,
  `datetime` DATETIME NOT NULL,
  `action_code` INT NOT NULL,
  PRIMARY KEY (`log_row_id`),
  INDEX `fk_log_trail_log_trail_codes_idx` (`action_code` ASC),
  CONSTRAINT `fk_log_trail_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_log_trail_log_codes`
    FOREIGN KEY (`action_code`)
    REFERENCES `smap_production`.`log_codes` (`action_code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`last_logon`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`last_logon` (
  `user_id` INT NOT NULL,
  `datetime` DATETIME NOT NULL,
  `ip` VARCHAR(15) NULL,
  PRIMARY KEY (`user_id`),
  CONSTRAINT `fk_last_logon_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`log_production`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`log_production` (
  `log_row_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `action_code` INT NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`log_row_id`),
  INDEX `fk_log_prodcution_log_codes_idx` (`action_code` ASC),
  INDEX `fk_log_production_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_log_prodcution_log_codes`
    FOREIGN KEY (`action_code`)
    REFERENCES `smap_production`.`log_codes` (`action_code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_log_production_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`analysts_flagged_elements_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`analysts_flagged_elements_c` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`vendor_id`, `e_id`, `user_id`),
  INDEX `fk_analysts_flagged_elements_elements_idx` (`e_id` ASC),
  INDEX `fk_analysts_flagged_elements_user_idx` (`user_id` ASC),
  CONSTRAINT `fk_analysts_flagged_elements_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_analysts_flagged_elements_elements`
    FOREIGN KEY (`e_id`)
    REFERENCES `smap_production`.`elements_c` (`eid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_analysts_flagged_elements_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`analysts_flagged_elements_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`analysts_flagged_elements_h` (
  `vendor_id` INT NOT NULL,
  `e_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `active` INT(1) NOT NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `updated_by_user_id` INT NOT NULL,
  PRIMARY KEY (`vendor_id`, `e_id`, `user_id`, `ud`),
  INDEX `fk_analyst_flagged_elements_users_2_idx` (`user_id` ASC),
  CONSTRAINT `fk_analyst_flagged_elements_users_2`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`triggers_disabled_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`triggers_disabled_c` (
  `flag` INT(1) NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`triggers_disabled_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`triggers_disabled_h` (
  `flag` INT(1) NOT NULL,
  `quarter` INT(1) NULL,
  `year` INT(4) NULL,
  `ud` DATETIME NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`flag`),
  INDEX `fk_triggers_disabled_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_triggers_disabled_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`calendar_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`calendar_c` (
  `eventid` INT NOT NULL,
  `event_name` VARCHAR(45) NOT NULL,
  `event_quarter` INT(1) NOT NULL,
  `event_year` INT(4) NOT NULL,
  `date1` DATETIME NULL,
  `date2` DATETIME NOT NULL,
  `all` INT(1) NOT NULL,
  PRIMARY KEY (`eventid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`calendar_modules_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`calendar_modules_c` (
  `event_id` INT NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`event_id`, `m_id`),
  INDEX `fk_calendar_modules_modules_idx` (`m_id` ASC),
  CONSTRAINT `fk_calendar_modules_calendar`
    FOREIGN KEY (`event_id`)
    REFERENCES `smap_production`.`calendar_c` (`eventid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_calendar_modules_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`calendar_vendors_c`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`calendar_vendors_c` (
  `event_id` INT NOT NULL,
  `vendor_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`event_id`, `vendor_id`),
  INDEX `fk_calendar_vendors_vendors_idx` (`vendor_id` ASC),
  CONSTRAINT `fk_calendar_vendors_calendar2`
    FOREIGN KEY (`event_id`)
    REFERENCES `smap_production`.`calendar_c` (`eventid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_calendar_vendors_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`calendar_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`calendar_h` (
  `eventid` INT NOT NULL,
  `event_name` VARCHAR(45) NOT NULL,
  `event_quarter` INT(1) NOT NULL,
  `event_year` INT(4) NOT NULL,
  `date1` DATETIME NULL,
  `date2` DATETIME NOT NULL,
  `all` INT(1) NOT NULL,
  `active` INT(1) NOT NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`eventid`, `ud`),
  INDEX `fk_calendar_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_calendar_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`calendar_modules_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`calendar_modules_h` (
  `event_id` INT NOT NULL,
  `m_id` INT UNSIGNED NOT NULL,
  `active` INT(1) NOT NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `m_id`, `ud`),
  INDEX `fk_calendar_modules_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_calendar_modules_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_production`.`calendar_vendors_h`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_production`.`calendar_vendors_h` (
  `event_id` INT NOT NULL,
  `vendor_id` INT UNSIGNED NOT NULL,
  `active` INT(1) NOT NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `ud` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `vendor_id`),
  INDEX `fk_calendar_vendors_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_calendar_vendors_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `smap_staging` ;

-- -----------------------------------------------------
-- Table `smap_staging`.`rfi_vendors_staging`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_staging`.`rfi_vendors_staging` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `self_score` DECIMAL(2,1) NULL,
  `self_description` VARCHAR(2000) NULL,
  `ud` DATETIME NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`vendor_id`, `e_id`),
  INDEX `fk_elements_idx` (`e_id` ASC),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_vendors_staging_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vendors_staging_elements`
    FOREIGN KEY (`e_id`)
    REFERENCES `smap_production`.`elements_c` (`eid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vendors_staging_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_staging`.`rfi_analysts_staging`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_staging`.`rfi_analysts_staging` (
  `vendor_id` INT UNSIGNED NOT NULL,
  `e_id` INT UNSIGNED NOT NULL,
  `sm_score` DECIMAL(2,1) NULL,
  `analyst_notes` VARCHAR(1000) NULL,
  `ud` DATETIME NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`vendor_id`, `e_id`),
  INDEX `fk_elements_idx` (`e_id` ASC),
  INDEX `fk_users_idx` (`user_id` ASC),
  CONSTRAINT `fk_analyst_staging_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_analyst_staging_vendors_elements`
    FOREIGN KEY (`e_id`)
    REFERENCES `smap_production`.`elements_c` (`eid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_analyst_staging_vendors_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smap_staging`.`log_staging`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_staging`.`log_staging` (
  `log_row_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `action_code` INT NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`log_row_id`),
  INDEX `fk_log_staging_users_idx` (`user_id` ASC),
  INDEX `fk_log_staging_log_codes_idx` (`action_code` ASC),
  CONSTRAINT `fk_log_staging_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `smap_production`.`users_c` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_log_staging_log_codes`
    FOREIGN KEY (`action_code`)
    REFERENCES `smap_production`.`log_codes` (`action_code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `smap_output` ;

-- -----------------------------------------------------
-- Table `smap_output`.`final_output_data`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smap_output`.`final_output_data` (
  `m_id` INT UNSIGNED NOT NULL,
  `persona_id` INT NOT NULL,
  `vendor_id` INT UNSIGNED NOT NULL,
  `bubble_size` INT NULL,
  `number_of_refs` INT NULL,
  `customer_score` DECIMAL(4,2) NULL,
  `sm_score` DECIMAL(3,2) NULL,
  `displayed` INT(1) NULL,
  `version` INT NULL,
  `ud` DATETIME NULL,
  PRIMARY KEY (`m_id`, `persona_id`, `vendor_id`),
  INDEX `fk_personas_idx` (`persona_id` ASC),
  INDEX `fk_vendors_idx` (`vendor_id` ASC),
  CONSTRAINT `fk_final_output_data_modules`
    FOREIGN KEY (`m_id`)
    REFERENCES `smap_production`.`modules_c` (`mid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_final_output_data_personas`
    FOREIGN KEY (`persona_id`)
    REFERENCES `smap_production`.`personas_c` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_final_output_data_vendors`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `smap_production`.`vendors_c` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `smap_production` ;

-- -----------------------------------------------------
-- function current_quarter
-- -----------------------------------------------------

DELIMITER $$
USE `smap_production`$$
CREATE FUNCTION current_quarter()
	RETURNS INT(1)
    READS SQL DATA
	BEGIN
        RETURN (SELECT quarter FROM current_quarteryear_c);
	END$$

DELIMITER ;

-- -----------------------------------------------------
-- function current_year
-- -----------------------------------------------------

DELIMITER $$
USE `smap_production`$$
CREATE FUNCTION current_year()
	RETURNS INT(4)
    READS SQL DATA
	BEGIN
        RETURN (SELECT year FROM current_quarteryear_c);
	END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure e_qy
-- -----------------------------------------------------

DELIMITER $$
USE `smap_production`$$
CREATE PROCEDURE e_qy(IN myquarter INT(1), IN myyear INT(4))
    BEGIN
		/*SET myquarter = IFNULL(myquarter, current_quarter());
        SET myyear = IFNULL(myyear, current_year());
		SELECT * FROM(
			SELECT *, row_number() over (partition by eid ORDER BY year DESC, quarter DESC, ud DESC) as row_order  FROM elements WHERE year < myyear OR (year = myyear and quarter <= myquarter)
			) as t1
		WHERE row_order = 1;*/
    END$$

DELIMITER ;

-- -----------------------------------------------------
-- function triggers_disabled
-- -----------------------------------------------------

DELIMITER $$
USE `smap_production`$$
CREATE FUNCTION triggers_disabled()
	RETURNS INT(1)
    READS SQL DATA
	BEGIN
        RETURN (SELECT flag FROM triggers_disabled_c);
	END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure all_quarter_year
-- -----------------------------------------------------

DELIMITER $$
USE `smap_production`$$
CREATE PROCEDURE `all_quarter_year` ()
BEGIN

END$$

DELIMITER ;
USE `smap_production`;

DELIMITER $$
USE `smap_production`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smap_production`.`elements_c_AFTER_INSERT` AFTER INSERT ON `elements_c` FOR EACH ROW
BEGIN
	IF triggers_disabled() = 0 THEN
		INSERT INTO elements_h VALUES (new.eid, new.s_id, new.element_name, new.description, new.scoring_scale, new.e_order, current_quarter(), current_year(), CURRENT_TIMESTAMP(), 1); -- missing userid logic
	END IF;
END$$

USE `smap_production`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smap_production`.`elements_c_AFTER_UPDATE` AFTER UPDATE ON `elements_c` FOR EACH ROW
BEGIN
	IF triggers_disabled() = 0 THEN
		INSERT INTO elements_h VALUES (new.eid, new.s_id, new.element_name, new.description, new.scoring_scale, new.e_order, current_quarter(), current_year(), CURRENT_TIMESTAMP(), 1); -- missing userid logic
	END IF;
END$$

USE `smap_production`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smap_production`.`module_elements_c_AFTER_INSERT` AFTER INSERT ON `module_elements_c` FOR EACH ROW
BEGIN
	INSERT INTO module_elements_h VALUES (new.m_id, new.e_id, 1, current_quarter(), current_year(), CURRENT_TIMESTAMP(), 1); -- missing userid logic
END$$

USE `smap_production`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smap_production`.`module_elements_c_AFTER_UPDATE` AFTER UPDATE ON `module_elements_c` FOR EACH ROW
BEGIN
	INSERT INTO module_elements_h VALUES (new.m_id, new.e_id, 1, current_quarter(), current_year(), CURRENT_TIMESTAMP(), 1); -- missing userid logic
END$$

USE `smap_production`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smap_production`.`module_elements_c_AFTER_DELETE` AFTER DELETE ON `module_elements_c` FOR EACH ROW
BEGIN
	INSERT INTO module_elements_h VALUES (old.m_id, old.e_id, 0, current_quarter(), current_year(), CURRENT_TIMESTAMP(), 1); -- missing userid logic
END$$

USE `smap_production`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smap_production`.`log_trail_AFTER_INSERT` AFTER INSERT ON `log_trail` FOR EACH ROW
BEGIN
	IF ( new.action_code = 99 ) THEN -- CHANGE 99 FOR SUCCESFUL LOGIN (PROBABLY WILL BE ACTION_CODE = 1)
		INSERT INTO last_logon (user_id, datetime, ip) VALUES (new.user_id, new.datetime, new.ip);
	END IF;
END$$

USE `smap_production`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smap_production`.`triggers_disabled_c_AFTER_UPDATE` AFTER UPDATE ON `triggers_disabled_c` FOR EACH ROW
BEGIN
	-- Only trigger that will be activated wether trigger_disabled is 1 or 0
	INSERT INTO triggers_disabled_h VALUES (new.flag, current_quarter(), current_year(), CURRENT_TIMESTAMP(), 1); -- missing userid logic
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
